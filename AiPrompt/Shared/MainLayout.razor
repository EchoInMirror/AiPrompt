@using AiPrompt.Data
@using AiPrompt.Service
@using AiPrompt.Util
@using BlazorComponent
@inherits LayoutComponentBase

@inject IPromptService promptService
@inject ISourceService sourceService
@inject IConfigService configService
@inject NavigationManager navigationManager
@inject StateContainer stateContainer
@implements IDisposable

<MApp>
    <MNavigationDrawer @bind-Value="drawer" App>
        <SourceSelect @ref="sourceSelectRef"/>
        <h1 class="text-h6 text-center">
            AI-Prompt
        </h1>
        <MDivider></MDivider>
        <MList Nav Dense>
            <MListItemGroup ActiveClass="primary text--accent-4 white--text" @bind-Value="selected">
                @foreach (var item in promps) {
                    <MListItem Id="@item.Key" Href="@item.Key">
                        <MListItemTitle>@item.Name</MListItemTitle>
                    </MListItem>
                }
            </MListItemGroup>
        </MList>
    </MNavigationDrawer>
    <MAppBar Style="position:fixed;" Absolute
             Color="primary"
             Dark>
        <MAppBarNavIcon @onclick="() => drawer = !drawer"></MAppBarNavIcon>
        <MAppBarTitle>AI-Prompt</MAppBarTitle>
        <MSpacer></MSpacer>
        <MTextField @bind-Value="QueryString" HideDetails="@("auto")"
                    Label="搜索"
                    Clearable></MTextField>
        <MDialog @bind-Value="setting"
                 Persistent
                 MaxWidth="600">
            <ActivatorContent>
                <MButton Icon
                         @onclick="@OpenSetting">
                    <MIcon>mdi-cog</MIcon>
                </MButton>
            </ActivatorContent>
            <ChildContent>
                <MCard>
                    <MCardTitle>
                        <span class="text-h5">设置</span>
                    </MCardTitle>
                    <MCardText>
                        <MContainer>
                            <MRow>
                                <MCol Cols="12">
                                    <MTextField Label="咒语书目录" TValue="string" @bind-Value="Config.SourcePath"></MTextField>
                                </MCol>
                            </MRow>
                        </MContainer>
                        <small>(((((pussy)))))!!!</small>
                    </MCardText>
                    <MCardActions>
                        <MSpacer></MSpacer>
                        <MButton Color="blue darken-1"
                                 Text
                                 OnClick="() => setting = false">
                            关闭
                        </MButton>
                        <MButton Color="blue darken-1"
                                 Text
                                 OnClick="SaveSetting">
                            保存
                        </MButton>
                    </MCardActions>
                </MCard>
            </ChildContent>
        </MDialog>
     </MAppBar>

    <MMain Class="mt-16">
        @Body
    </MMain>
    <MFooter App>
        <!-- TODO -->
    </MFooter>
</MApp>


@code {
    private bool drawer = false;
    private bool setting = false;

    private Config Config { get; set; } = new();
    private List<Prompt> promps = new List<Prompt>();

    private StringNumber selected = 0;
    
    private SourceSelect sourceSelectRef;

    private string queryString;
    public string QueryString{
        get => queryString; 
        set {
            queryString = value;
            stateContainer.Query = value;
        }
    }

    async void OpenSetting(){
        Config.SourcePath = await sourceService.GetSourcePathAsync();
        setting = true;
        StateHasChanged();
    }

    async void SaveSetting (){
        await configService.SaveConfig(Config);
        await sourceSelectRef.Reload();
        setting = false;
        StateHasChanged();
    }

    //切换咒语书时拉取分类
    async void OnSourceChanged(){
        promps = await promptService.CategoriesAsync();
        if (promps.Count>0){
            navigationManager.NavigateTo(promps[0].Key);
            selected = 0;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Config.SourcePath = await sourceService.GetSourcePathAsync();
    }

    protected override void OnInitialized()
    {
        stateContainer.OnSourceChanged += OnSourceChanged;
    }

    public void Dispose(){
        stateContainer.OnSourceChanged -= OnSourceChanged;
    }
}